{
	"name": "advice test1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool0706",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b37c60c4-fdf3-4a04-aad7-74a72c3282ab"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_sparkr",
				"display_name": "r"
			},
			"language_info": {
				"name": "r"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/051ddeca-1ed6-4d8b-ba6f-1ff561e5f3b3/resourceGroups/bigdataqa/providers/Microsoft.Synapse/workspaces/wcustest/bigDataPools/SparkPool0706",
				"name": "SparkPool0706",
				"type": "Spark",
				"endpoint": "https://wcustest.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool0706",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Advice1"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					},
					"ms_comments": [
						{
							"threadId": "0b76e94d-7636-4686-bd72-6012906d97ee",
							"text": "wet34t34t4",
							"status": "active",
							"user": {
								"name": "Mei Zhang (HdiTooling)",
								"idType": "aad"
							},
							"createdDateUTC": 1657084957969,
							"modifiedDateUTC": 1657084957969,
							"replies": []
						},
						{
							"threadId": "2043e3d9-da7d-40c6-966c-88e5e545e60b",
							"text": "comment",
							"status": "active",
							"user": {
								"name": "Mei Zhang (HdiTooling)",
								"idType": "aad"
							},
							"createdDateUTC": 1657079978479,
							"modifiedDateUTC": 1657079978479,
							"replies": [
								{
									"replyId": "a05041bf-f356-42ab-b0e6-1ac2055fadb4",
									"text": "r435435",
									"user": {
										"name": "Mei Zhang (HdiTooling)",
										"idType": "aad"
									},
									"createdDateUTC": 1657084887987,
									"modifiedDateUTC": 1657084887987
								}
							]
						}
					],
					"ms_comment_ranges": {
						"2043e3d9-da7d-40c6-966c-88e5e545e60b": {
							"text": "takeOrdered",
							"start": {
								"line": 5,
								"column": 7
							},
							"end": {
								"line": 5,
								"column": 18
							}
						},
						"0b76e94d-7636-4686-bd72-6012906d97ee": {
							"text": "repartition",
							"start": {
								"line": 3,
								"column": 16
							},
							"end": {
								"line": 3,
								"column": 27
							}
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"%%spark\r\n",
					"val rdd = sc.parallelize(1 to 1000000)\r\n",
					"val rdd2 = rdd.repartition(64)\r\n",
					"val Array(train, test) = rdd2.randomSplit(Array(70, 30), 1)\r\n",
					"train.takeOrdered(10)"
				],
				"attachments": null,
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Advice 2"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"CREATE TABLE t1 (str STRING) USING parquet\")\r\n",
					"spark.sql(\"CREATE TABLE t2 (str STRING) USING parquet\")\r\n",
					"spark.sql(\"CREATE TABLE t3 (str STRING) USING parquet\")\r\n",
					""
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"SELECT /*+ testtest, testtest1, testtest2, testtest3, testtest4, testtest5, testtest6, testtest7, testtest8, testtest9, testtest10, testtest11, testtest12, testtest13, testtest14, testtest15, testtest16 */ * FROM t1\")"
				],
				"attachments": null,
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"SELECT /*+ BRPADCAST(t1), MERGF(t1, t2) */ * FROM t1 INNER JOIN t2 ON t1.str = t2.str\")"
				],
				"attachments": null,
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"SELECT /*+ BRPADCAST(test1) */ * FROM t1 INNER JOIN t2 ON t1.str = t2.str\")"
				],
				"attachments": null,
				"execution_count": 27
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Advice 3"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\r\n",
					"import java.io.FileNotFoundException\r\n",
					"def test(): Unit = {\r\n",
					"    val data = 1 to 100\r\n",
					"    val inputRdd = sc.parallelize(data, 3)\r\n",
					"    inputRdd.map(number => {\r\n",
					"        if (number % 5 == 0){\r\n",
					"            throw new FileNotFoundException(\"Network connecting issues\")\r\n",
					"        }\r\n",
					"        if (number % 3 == 0){\r\n",
					"            throw new RuntimeException(\"Authenticate failure issues\")\r\n",
					"        }\r\n",
					"    }).count()\r\n",
					"}\r\n",
					"import org.apache.spark.SparkContext\r\n",
					"\r\n",
					"\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }\r\n",
					"try { test() } catch{ case _ : Throwable => }"
				],
				"attachments": null,
				"execution_count": 21
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Advice4"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark \r\n",
					"\r\n",
					"import sys.process._ \r\n",
					"val localpath = \"wrongSchema:///tmp/myfile.json\" \r\n",
					"mssparkutils.fs.mkdirs(\"/test/demo/\") \r\n",
					"mssparkutils.fs.cp(localpath, \"/test/demo/\") "
				],
				"attachments": null,
				"execution_count": 47
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Advice 5"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\r\n",
					"spark.stop()"
				],
				"attachments": null,
				"execution_count": 41
			}
		]
	}
}